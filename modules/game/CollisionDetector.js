/**
 * This code was pregenerated by Claude, given game.jsx, then moderately refactored
 */

// modules/game/CollisionDetector.js

export class CollisionDetector {

	// This should be changed later so player only earns points when enemy killed
	/**
	 * Check for enemy collision with projectiles to determine earned score points
	 * @param {Array} projectiles 
	 * @param {Array} enemies 
	 * @returns Number of points earned
	 */
	static checkProjectileEnemyCollisions(projectiles, enemies) {
		let totalScore = 0;

		// Go through each enemy
		for (let enemy of enemies) {
			// Only process projectiles that hit an enemy
			for (let projectile of projectiles) {
				// Skip any projectiles that didn't hit anything
				if (!projectile.collidesWith(enemy)) continue;

				// Deliver damage and remove the projectile
				enemy.takeDamage(projectile.getDamage());
				projectile.remove();
				// Increment points earned
				totalScore += enemy.getPoints();
			}
		}

		return totalScore;
	}

	/**
	 * Filter the game projectiles and enemies, purging 
	 * any that are off-screen or otherwise inactive.
	 * @param {*} projectiles List of projectiles
	 * @param {*} enemies List of enemies
	 * @param {*} screenWidth The screen width
	 * @param {*} screenHeight The screen height
	 * @returns [Array\<Enemy\>, Array\<Projectile\>] Two cleaned lists of enemies and projectiles
	 */
	static filterActiveEntities(projectiles, enemies, screenWidth, screenHeight) {
		const activeProjectiles = projectiles.filter(
			p => p.active && !p.isOutOfBounds(screenWidth, screenHeight)
		);

		const activeEnemies = enemies.filter(
			e => e.active && e.getHp() > 0 && !e.isOutOfBounds(screenWidth, screenHeight)
		);

		return { activeProjectiles, activeEnemies };
	}
}