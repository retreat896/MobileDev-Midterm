// Generated by Chat
/**
 * Converts an Image Blob to a base64 URL
 * @param {*} blob The image Blob 
 * @returns Base64 Image URL
 */
async function blobToBase64(blob) {
    const reader = new FileReader();
    reader.readAsDataURL(blob);
    await new Promise(res => (reader.onloadend = res));
    return reader.result;
}

class Level {
    #image;
    #name="";
    
    /**
     * Create a new Level object
     * @param {*} name The name of the level
     */
    constructor(name) {
        this.#name = name;
    }

    /**
     * Get the value of the Level object.
     * Used implicitly in logic comparison.
     * @returns The Level name
     */
    valueOf() {
        return this.#name;
    }

    /**
     * Get the source for the Level image
     * @returns The image source (for rendering)
     */
    getImage() {
        return this.#image;
    }

    /**
     * Get the Level name
     * @returns The name of the Level
     */
    getName() {
        return this.#name;
    }

    /**
     * Set the Level image to a local image
     * @param {*} requiredImage The returned value of require('/image/filepath.jpg')
     * @returns The Level object
     */
    setImage(requiredImage) {
        this.#image = requiredImage;
        return this;
    }

    /**
     * Set the Level image to a blob image.
     * Converts Blob into Base64 URL (async)
     * @param {*} blobImage The Blob value for the image
     * @returns A Promise of the Level object
     */
    setImageBlob(blobImage) {
        return new Promise(async (resolve, reject) => {
            // Convert the Blob Image to base64 URL
            let blobImageURL = await blobToBase64(blobImage);
            
            // Use the setImageURI method to set the image object values
            // So object creation is only in one spot
            resolve(this.setImageURI(blobImageURL));


            //this.#image = { uri: `data:image/*;base64,${blobImage}` };

            //resolve(this.setImageURI(`data:image/*;base64,${blobImageURL}`));
        })
    }

    /**
     * Set the Level image to a URL image
     * @param {*} url The image URL
     * @returns The Level object
     */
    setImageURI(url) {
        this.#image = {
            uri: url
        };
        return this;
    }
}

// Export the Level class
export default Level;